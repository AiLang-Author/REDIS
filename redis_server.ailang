// redis_server_extended.ailang
// Extended Redis server with more commands

LibraryImport.Library.RESP

// Helper function to convert string to integer
Function.Helpers.StringToInt {
    Input: str:
    Body: {
        // Simple string to integer conversion
        result = 0
        i = 0
        len = StringLength(str)
        negative = 0
        
        // Check for negative sign
        IfCondition GreaterThan(len, 0) ThenBlock {
            first = GetByte(str, 0)
            IfCondition EqualTo(first, 45) ThenBlock {  // '-'
                negative = 1
                i = 1
            }
        }
        
        WhileLoop LessThan(i, len) {
            byte = GetByte(str, i)
            // Check if digit (48-57 are '0'-'9')
            IfCondition And(GreaterEqual(byte, 48), LessEqual(byte, 57)) ThenBlock {
                digit = Subtract(byte, 48)
                result = Multiply(result, 10)
                result = Add(result, digit)
            }
            i = Add(i, 1)
        }
        
        IfCondition negative ThenBlock {
            result = Subtract(0, result)
        }
        
        ReturnValue(result)
    }
}

// Helper to convert integer to string
Function.Helpers.IntToString {
    Input: num:
    Body: {
        // Allocate buffer for result
        buffer = Allocate(32)
        pos = 0
        value = num
        
        // Handle negative
        IfCondition LessThan(value, 0) ThenBlock {
            SetByte(buffer, pos, 45)  // '-'
            pos = Add(pos, 1)
            value = Subtract(0, value)
        }
        
        // Handle zero
        IfCondition EqualTo(value, 0) ThenBlock {
            SetByte(buffer, pos, 48)  // '0'
            pos = Add(pos, 1)
            SetByte(buffer, pos, 0)   // null terminate
            ReturnValue(buffer)
        }
        
        // Convert digits (simplified - assumes small numbers)
        start_pos = pos
        WhileLoop GreaterThan(value, 0) {
            digit = Modulo(value, 10)
            SetByte(buffer, pos, Add(48, digit))
            pos = Add(pos, 1)
            value = Divide(value, 10)
        }
        
        // Reverse the digits
        end_pos = Subtract(pos, 1)
        WhileLoop LessThan(start_pos, end_pos) {
            temp = GetByte(buffer, start_pos)
            SetByte(buffer, start_pos, GetByte(buffer, end_pos))
            SetByte(buffer, end_pos, temp)
            start_pos = Add(start_pos, 1)
            end_pos = Subtract(end_pos, 1)
        }
        
        SetByte(buffer, pos, 0)  // null terminate
        ReturnValue(buffer)
    }
}

SubRoutine.Main {
   //Printmessage("AILANG Redis Server - Extended Version")
   //Printmessage("=======================================")
    
    // Create main store
    store = HashCreate(1024)
    
    // Create server socket
    server_socket = SocketCreate()
    IfCondition LessEqual(server_socket, 0) ThenBlock {
       //Printmessage("ERROR: Failed to create socket")
        Exit(1)
    }
    
    // Set options and bind
    SocketSetOption(server_socket, 1, 2, 1)
    result = SocketBind(server_socket, 0, 6379)
    IfCondition LessThan(result, 0) ThenBlock {
       //Printmessage("ERROR: Failed to bind")
        SocketClose(server_socket)
        Exit(1)
    }
    
    // Listen
    result = SocketListen(server_socket, 128)
    IfCondition LessThan(result, 0) ThenBlock {
       //Printmessage("ERROR: Failed to listen")
        SocketClose(server_socket)
        Exit(1)
    }
    
   //Printmessage("Server ready on port 6379")
   //Printmessage("Commands: PING, SET, GET, DEL, EXISTS, INCR, DECR, APPEND, STRLEN, ECHO, QUIT")
   //Printmessage("")
    
    // Main server loop
    server_running = 1
    WhileLoop server_running {
        client_socket = SocketAccept(server_socket)
        
        IfCondition GreaterThan(client_socket, 0) ThenBlock {
           //Printmessage(">>> Client connected")
            
            buffer = Allocate(4096)
            client_connected = 1
            
            WhileLoop client_connected {
                bytes_read = SocketRead(client_socket, buffer, 4096)
                
                IfCondition GreaterThan(bytes_read, 0) ThenBlock {
                    // Parse command
                    command_array = RESP.ParseArray(buffer, bytes_read)
                    
                    IfCondition NotEqual(command_array, 0) ThenBlock {
                        array_len = ArrayLength(command_array)
                        
                        IfCondition GreaterThan(array_len, 0) ThenBlock {
                            cmd_str = ArrayGet(command_array, 0)
                            command = StringToUpper(cmd_str)
                            
                           //Printmessage("CMD: ")
                          //  PrintString(command)
                            
                            response = 0
                            
                            // PING
                            is_ping = StringCompare(command, "PING")
                            IfCondition EqualTo(is_ping, 0) ThenBlock {
                                response = RESP.SimpleString("PONG")
                            }
                            
                            // ECHO
                            is_echo = StringCompare(command, "ECHO")
                            IfCondition And(EqualTo(is_echo, 0), GreaterEqual(array_len, 2)) ThenBlock {
                                echo_msg = ArrayGet(command_array, 1)
                                response = RESP.BulkString(echo_msg)
                            }
                            
                            // SET
                            is_set = StringCompare(command, "SET")
                            IfCondition And(EqualTo(is_set, 0), GreaterEqual(array_len, 3)) ThenBlock {
                                key = ArrayGet(command_array, 1)
                                value = ArrayGet(command_array, 2)
                                HashSet(store, key, value)
                               //Printmessage(" ")
                               // PrintString(key)
                               //Printmessage("=")
                              //  PrintString(value)
                                response = RESP.SimpleString("OK")
                            }
                            
                            // GET
                            is_get = StringCompare(command, "GET")
                            IfCondition And(EqualTo(is_get, 0), GreaterEqual(array_len, 2)) ThenBlock {
                                key = ArrayGet(command_array, 1)
                                exists = HashExists(store, key)
                                IfCondition exists ThenBlock {
                                    value = HashGet(store, key)
                                    response = RESP.BulkString(value)
                                } ElseBlock {
                                    response = RESP.BulkString(0)  // nil
                                }
                            }
                            
                            // DEL
                            is_del = StringCompare(command, "DEL")
                            IfCondition And(EqualTo(is_del, 0), GreaterEqual(array_len, 2)) ThenBlock {
                                key = ArrayGet(command_array, 1)
                                exists = HashExists(store, key)
                                IfCondition exists ThenBlock {
                                    // Mark as deleted by setting to empty
                                    HashSet(store, key, "")
                                    response = RESP.Integer(1)
                                } ElseBlock {
                                    response = RESP.Integer(0)
                                }
                            }
                            
                            // EXISTS
is_exists = StringCompare(command, "EXISTS")
IfCondition And(EqualTo(is_exists, 0), GreaterEqual(array_len, 2)) ThenBlock {
    key = ArrayGet(command_array, 1)
    exists = HashExists(store, key)
    
    // Check if not empty (our DEL sets to empty)
    IfCondition exists ThenBlock {
        value = HashGet(store, key)
        len = StringLength(value)
        IfCondition GreaterThan(len, 0) ThenBlock {
            response = RESP.Integer(1)
            
            // DEBUG: Show what RESP.Integer returned
           //Printmessage("DEBUG Integer(1) bytes: ")
            debug_i = 0
            WhileLoop LessThan(debug_i, 6) {
                debug_byte = GetByte(response, debug_i)
              //  PrintNumber(debug_byte)
               //Printmessage(" ")
                debug_i = Add(debug_i, 1)
            }
           //Printmessage("")
        } ElseBlock {
            response = RESP.Integer(0)
        }
    } ElseBlock {
        response = RESP.Integer(0)
    }
}
                        

                            // INCR
                            is_incr = StringCompare(command, "INCR")
                            IfCondition And(EqualTo(is_incr, 0), GreaterEqual(array_len, 2)) ThenBlock {
                                key = ArrayGet(command_array, 1)
                                current = 0
                                
                                exists = HashExists(store, key)
                                IfCondition exists ThenBlock {
                                    val_str = HashGet(store, key)
                                    current = Helpers.StringToInt(val_str)
                                }
                                
                                new_val = Add(current, 1)
                                new_str = Helpers.IntToString(new_val)
                                HashSet(store, key, new_str)
                                response = RESP.Integer(new_val)
                                Deallocate(new_str, 0)
                            }
                            
                            // DECR
                            is_decr = StringCompare(command, "DECR")
                            IfCondition And(EqualTo(is_decr, 0), GreaterEqual(array_len, 2)) ThenBlock {
                                key = ArrayGet(command_array, 1)
                                current = 0
                                
                                exists = HashExists(store, key)
                                IfCondition exists ThenBlock {
                                    val_str = HashGet(store, key)
                                    current = Helpers.StringToInt(val_str)
                                }
                                
                                new_val = Subtract(current, 1)
                                new_str = Helpers.IntToString(new_val)
                                HashSet(store, key, new_str)
                                response = RESP.Integer(new_val)
                                Deallocate(new_str, 0)
                            }
                            
                            // APPEND
                            is_append = StringCompare(command, "APPEND")
                            IfCondition And(EqualTo(is_append, 0), GreaterEqual(array_len, 3)) ThenBlock {
                                key = ArrayGet(command_array, 1)
                                append_val = ArrayGet(command_array, 2)
                                
                                current = ""
                                exists = HashExists(store, key)
                                IfCondition exists ThenBlock {
                                    current = HashGet(store, key)
                                }
                                
                                new_val = StringConcat(current, append_val)
                                HashSet(store, key, new_val)
                                new_len = StringLength(new_val)
                                response = RESP.Integer(new_len)
                                Deallocate(new_val, 0)
                            }
                            
                            // STRLEN
                            is_strlen = StringCompare(command, "STRLEN")
                            IfCondition And(EqualTo(is_strlen, 0), GreaterEqual(array_len, 2)) ThenBlock {
                                key = ArrayGet(command_array, 1)
                                len = 0
                                
                                exists = HashExists(store, key)
                                IfCondition exists ThenBlock {
                                    value = HashGet(store, key)
                                    len = StringLength(value)
                                }
                                
                                response = RESP.Integer(len)
                            }
                            
                            // QUIT
                            is_quit = StringCompare(command, "QUIT")
                            IfCondition EqualTo(is_quit, 0) ThenBlock {
                                response = RESP.SimpleString("OK")
                                client_connected = 0
                            }


                            // redis_server_config.ailang
                            // Redis server with CONFIG support for benchmarking
                            // Add this section to your server after the other command handlers

                            // CONFIG command handler
                            is_config = StringCompare(command, "CONFIG")
                            IfCondition And(EqualTo(is_config, 0), GreaterEqual(array_len, 2)) ThenBlock {
                                subcommand = ArrayGet(command_array, 1)
                                subcommand_upper = StringToUpper(subcommand)
                                
                                // CONFIG GET
                                is_get = StringCompare(subcommand_upper, "GET")
                                IfCondition EqualTo(is_get, 0) ThenBlock {
                                    // redis-benchmark often asks for specific configs
                                    // Return empty array or minimal config
                                    IfCondition GreaterEqual(array_len, 3) ThenBlock {
                                        param = ArrayGet(command_array, 2)
                                        
                                        // Check for save parameter (common benchmark query)
                                        is_save = StringCompare(param, "save")
                                        IfCondition EqualTo(is_save, 0) ThenBlock {
                                            // Return array with ["save", ""] - indicating no save
                                            config_array = ArrayCreate(2)
                                            ArraySet(config_array, 0, "save")
                                            ArraySet(config_array, 1, "")
                                            response = RESP.Array(config_array)
                                            ArrayDestroy(config_array)
                                        } ElseBlock {
                                            // Return empty array for other params
                                            empty_array = ArrayCreate(0)
                                            response = RESP.Array(empty_array)
                                            ArrayDestroy(empty_array)
                                        }
                                    } ElseBlock {
                                        // No specific param, return empty array
                                        empty_array = ArrayCreate(0)
                                        response = RESP.Array(empty_array)
                                        ArrayDestroy(empty_array)
                                    }
                                }
                                
                                // CONFIG SET (just return OK for now)
                                is_set = StringCompare(subcommand_upper, "SET")
                                IfCondition EqualTo(is_set, 0) ThenBlock {
                                    response = RESP.SimpleString("OK")
                                }
                            }

                            // INFO command (often requested by clients)
                            is_info = StringCompare(command, "INFO")
                            IfCondition EqualTo(is_info, 0) ThenBlock {
                                // Return minimal server info
                                info_text = "# Server\r\nredis_version:AILANG-1.0\r\nprocess_id:1\r\ntcp_port:6379\r\n\r\n# Clients\r\nconnected_clients:1\r\n\r\n# Memory\r\nused_memory:1024\r\n\r\n# Stats\r\ntotal_connections_received:1\r\ntotal_commands_processed:1\r\n"
                                response = RESP.BulkString(info_text)
                            }

                            // COMMAND command (returns command info, needed by some clients)
                            is_command = StringCompare(command, "COMMAND")
                            IfCondition EqualTo(is_command, 0) ThenBlock {
                                // Return empty array - we don't provide detailed command info
                                empty_array = ArrayCreate(0)
                                response = RESP.Array(empty_array)
                                ArrayDestroy(empty_array)
                            }

                            // SELECT command (select database - we only have db 0)
                            is_select = StringCompare(command, "SELECT")
                            IfCondition And(EqualTo(is_select, 0), GreaterEqual(array_len, 2)) ThenBlock {
                                db_num_str = ArrayGet(command_array, 1)
                                // We only support database 0
                                is_zero = StringCompare(db_num_str, "0")
                                IfCondition EqualTo(is_zero, 0) ThenBlock {
                                    response = RESP.SimpleString("OK")
                                } ElseBlock {
                                    response = RESP.Error("ERR DB index out of range")
                                }
                            }

                            // FLUSHDB command (clear current database)
                            is_flushdb = StringCompare(command, "FLUSHDB")
                            IfCondition EqualTo(is_flushdb, 0) ThenBlock {
                                // Create new empty hash table (simulates clearing)
                                // Note: This leaks the old hash table memory
                                store = HashCreate(1024)
                                response = RESP.SimpleString("OK")
                            }

                            // DBSIZE command (number of keys)
                            is_dbsize = StringCompare(command, "DBSIZE")
                            IfCondition EqualTo(is_dbsize, 0) ThenBlock {
                                // We don't track key count, so return 0 for now
                                // In a real implementation, you'd maintain a counter
                                response = RESP.Integer(0)
                            }
                                                        
                            // Send response
                            // Send response
                            IfCondition NotEqual(response, 0) ThenBlock {
                                response_len = StringLength(response)  // Just use StringLength
                                bytes_sent = SocketWrite(client_socket, response, response_len)
                                Deallocate(response, 0)
                            } ElseBlock {
                                error_msg = RESP.Error("unknown command")
                                error_len = StringLength(error_msg)  // Same here
                                SocketWrite(client_socket, error_msg, error_len)
                                Deallocate(error_msg, 0)
                            }
                            
                           //Printmessage("")
                            
                            // Clean up array
                            i = 0
                            WhileLoop LessThan(i, array_len) {
                                element = ArrayGet(command_array, i)
                                IfCondition NotEqual(element, 0) ThenBlock {
                                    Deallocate(element, 0)
                                }
                                i = Add(i, 1)
                            }
                        }
                        
                        ArrayDestroy(command_array)
                    }
                } ElseBlock {
                    client_connected = 0
                }
            }
            
            SocketClose(client_socket)
            Deallocate(buffer, 4096)
           //Printmessage("<<< Client disconnected")
           //Printmessage("")
        }
    }
    
    SocketClose(server_socket)
}

RunTask(Main)